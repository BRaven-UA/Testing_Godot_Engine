[gd_resource type="VisualShader" load_steps=7 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 1

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 0.988235, 0, 0, 0.411765 )

[sub_resource type="VisualShaderNodeScalarConstant" id=4]
constant = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=5]

[sub_resource type="VisualShaderNodeScalarConstant" id=6]

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(SCREEN_UV,0.0);

// Scalar:7
	float n_out7p0;
	n_out7p0 = 0.000000;

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out2p0.xy , n_out7p0 );
		n_out3p0 = _tex_read.rgb;
		n_out3p1 = _tex_read.a;
	}

// Scalar:5
	float n_out5p0;
	n_out5p0 = 1.000000;

// Output:0
	COLOR.rgb = n_out3p0;
	COLOR.a = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -218.889, -138.889 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 660, 80 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -160, 40 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 220, 20 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 240, 200 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 560, 200 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 380, 120 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -160, 120 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 1, 3, 1, 6, 0, 7, 0, 3, 1, 3, 0, 0, 0, 2, 0, 3, 0 )
