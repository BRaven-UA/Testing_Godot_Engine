[gd_resource type="VisualShader" load_steps=5 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 2

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "Brightness"

[resource]
code = "shader_type canvas_item;
uniform float Brightness;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:6
	float n_out6p0;
	n_out6p0 = Brightness;

// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 _tex_read = texture( TEXTURE , n_out2p0.xy );
		n_out4p0 = _tex_read.rgb;
		n_out4p1 = _tex_read.a;
	}

// VectorOp:5
	vec3 n_out5p0;
	n_out5p0 = vec3(n_out6p0) * n_out4p0;

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -58.9506, -18.2222 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 680, 180 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 100, 180 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( 260, 160 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 480, 100 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( 260, 100 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 4, 0, 5, 1, 5, 0, 0, 0, 4, 1, 0, 1, 6, 0, 5, 0 )
